システム！”dolittle_lib/mbot/mBotTools” 使う。
//////////////////////////////////////////////////
//mbot="mbot"。
__mbot実体= シリアルポート！1024 115200 作る。
__mbot実体: __seq = 0。		// seqは０ origin
__mbot実体:BYTE?=「｜;ret｜
	「(self! 存在？)== いいえ」！の間「」実行。
	ret= (self! 1 値？)!文字コード. 
ret」。

//
// 　メソッド名：パラメータ生成
//    責務：パラメータを送信順序に合わせて配列に格納する。
//    補足：Excelから自動生成


__mbot実体:パラメータ生成=「	｜__obj;sendArray｜	sendArray=配列！作る。							
「(__obj:	ポート	)!= undef	」！なら「	sendArray!(__obj:	ポート	)書く。	」実行。	  // 	ポート	(	ポート	)
「(__obj:	スロット	)!= undef	」！なら「	sendArray!(__obj:	スロット	)書く。	」実行。	  // 	スロット	(	スロット	)
「(__obj:	軸パラメータ	)!= undef	」！なら「	sendArray!(__obj:	軸パラメータ	)書く。	」実行。	  // 	軸パラメータ	(	軸パラメータ	)
「(__obj:	_45	)!= undef	」！なら「	sendArray!(__obj:	_45	)書く。	」実行。	  // 	_45	(	_45	)
「(__obj:	データソース	)!= undef	」！なら「	sendArray!(__obj:	データソース	)書く。	」実行。	  // 	データソース	(	データソース	)
「(__obj:	レベル	)!= undef	」！なら「	sendArray!(__obj:	レベル	)書く。	」実行。	  // 	レベル	(	レベル	)
「(__obj:	キー検出状態	)!= undef	」！なら「	sendArray!(__obj:	キー検出状態	)書く。	」実行。	  // 	キー検出状態	(	キー検出状態	)
「(__obj:	キーモジュール	)!= undef	」！なら「	sendArray!(__obj:	キーモジュール	)書く。	」実行。	  // 	キーモジュール	(	キーモジュール	)
「(__obj:	速度L	)!= undef	」！なら「	sendArray!(__obj:	速度L	)書く。	」実行。	  // 	速度L	(	速度L	)
「(__obj:	速度H	)!= undef	」！なら「	sendArray!(__obj:	速度H	)書く。	」実行。	  // 	速度H	(	速度H	)
「(__obj:	点灯レベル	)!= undef	」！なら「	sendArray!(__obj:	点灯レベル	)書く。	」実行。	  // 	点灯レベル	(	点灯レベル	)
「(__obj:	赤色レベル	)!= undef	」！なら「	sendArray!(__obj:	赤色レベル	)書く。	」実行。	  // 	赤色レベル	(	赤色レベル	)
「(__obj:	緑色レベル	)!= undef	」！なら「	sendArray!(__obj:	緑色レベル	)書く。	」実行。	  // 	緑色レベル	(	緑色レベル	)
「(__obj:	青色レベル	)!= undef	」！なら「	sendArray!(__obj:	青色レベル	)書く。	」実行。	  // 	青色レベル	(	青色レベル	)
「(__obj:	角度	)!= undef	」！なら「	sendArray!(__obj:	角度	)書く。	」実行。	  // 	角度	(	角度	)
「(__obj:	unknown1	)!= undef	」！なら「	sendArray!(__obj:	unknown1	)書く。	」実行。	  // 	unknown1	(	unknown1	)
「(__obj:	unknown2	)!= undef	」！なら「	sendArray!(__obj:	unknown2	)書く。	」実行。	  // 	unknown2	(	unknown2	)
「(__obj:	unknown3	)!= undef	」！なら「	sendArray!(__obj:	unknown3	)書く。	」実行。	  // 	unknown3	(	unknown3	)
「(__obj:	X偏移	)!= undef	」！なら「	sendArray!(__obj:	X偏移	)書く。	」実行。	  // 	X偏移	(	X偏移	)
「(__obj:	Y偏移	)!= undef	」！なら「	sendArray!(__obj:	Y偏移	)書く。	」実行。	  // 	Y偏移	(	Y偏移	)
「(__obj:	長さ	)!= undef	」！なら「	sendArray!(__obj:	長さ	)書く。	」実行。	  // 	長さ	(	長さ	)
「(__obj:	unknown4	)!= undef	」！なら「	sendArray!(__obj:	unknown4	)書く。	」実行。	  // 	unknown4	(	unknown4	)
「(__obj:	unknown5	)!= undef	」！なら「	sendArray!(__obj:	unknown5	)書く。	」実行。	  // 	unknown5	(	unknown5	)
「(__obj:	時	)!= undef	」！なら「	sendArray!(__obj:	時	)書く。	」実行。	  // 	時	(	時	)
「(__obj:	分	)!= undef	」！なら「	sendArray!(__obj:	分	)書く。	」実行。	  // 	分	(	分	)
「(__obj:	シャッター設定	)!= undef	」！なら「	sendArray!(__obj:	シャッター設定	)書く。	」実行。	  // 	シャッター設定	(	シャッター設定	)
「(__obj:	PWM値	)!= undef	」！なら「	sendArray!(__obj:	PWM値	)書く。	」実行。	  // 	PWM値	(	PWM値	)
「(__obj:	周波数L	)!= undef	」！なら「	sendArray!(__obj:	周波数L	)書く。	」実行。	  // 	周波数L	(	周波数L	)	
「(__obj:	周波数H	)!= undef	」！なら「	sendArray!(__obj:	周波数H	)書く。	」実行。	  // 	周波数H	(	周波数H	)	
「(__obj:	拍子L	)!= undef	」！なら「	sendArray!(__obj:	拍子L	)書く。	」実行。	  // 	拍子L	(	拍子L	)
「(__obj:	拍子H	)!= undef	」！なら「	sendArray!(__obj:	拍子H	)書く。	」実行。	  // 	拍子H	(	拍子H	)									
sendArray」。	

__mbot実体:Seq発行=「|;ret|
	ret = __seq。
	「__seq　== 255」！なら「__seq = 0。」そうでなければ「__seq = __seq  + 1。」実行。
	

ret」。

__mbot実体:命令する=「|_obj ;ret |
	sendSeq = self!(_obj)送信する。
	ret = self!(_obj:mode) 戻り値受信する。	//　良くない実装。要検討。
	「全部！((_obj:mode) == 2)　（ret　!= "执行指令return"）本当」！なら「
			システム！（”戻り値が执行指令のものではありません。dolittleを停止し、m-botの再起動をしてください。” ）表示ダイアログ。
	」実行。
	「全部！((_obj:mode) == 1)　((sendSeq)!=(ret:revSeq)) 本当」!なら「
			システム！（”sendSeq：”＋（sendSeq）＋”, revSeq：”＋（ret:revSeq）＋”です。\n 送受信のindexが一致しません。dolittleを停止し、m-botの再起動をしてください。” ）表示ダイアログ。
			self! 3秒 待つ。
		」実行。
	
ret」。

//
// 　メソッド名：パラメータ生成
//    責務：パラメータを送信順序に合わせて配列に格納する。
//    補足：
//
__mbot実体:送信する=「|cmdObj;ret seq|

	paramData=self!(cmdObj)パラメータ生成。
	self!（255）出力 （85）出力。	//head
	self!（(paramData!要素数？) + 3）出力。	//length
	seq = self!	Seq発行。
	self!（seq）出力。		//index
	self!（cmdObj:mode）出力。		//mode
	self!（cmdObj:ID）出力。		//命令ID

	execObj=self。
	paramData!「|x| execObj!(x)出力」それぞれ実行。
	
	ret = seq。

ret」。

mbotType=""。
mbotType:typeChar =1。
mbotType:typeFloat =2。
mbotType:typeShort =3。	// 4Byte
mbotType:typeString =4。
mbotType:typeOther=10。	// 実行命令の場合の特殊種別
//デバッグリスト＝リスト！ 作る　100 400 大きさ。
//デバッグリスト！（tmpArray！要素数？）書く

__mbot実体:戻り値受信する=「|isExec ;head_H head_L index type length tmpArray |
	head_H = self!BYTE?。
	head_L = self!BYTE?。
	「(isExec) == 1」！なら「	
		// 执行指令の時は長さとindexを返さないという微妙な仕様.
		// とりあえず、センサの時の処理を以下に記述。いい実装ではないので要修正。　
		「どれか！(head_H != 255 ) (head_L != 85) 本当」！なら「
			head_H = head_L。
			head_L  =self!BYTE?。
		」実行。
		index = self!BYTE?。
		type = self!BYTE?。
	
		tmpArray=配列！作る。
		ret= undef。
		「(type) ==(mbotType:typeFloat)」!なら「「tmpArray!(self!BYTE?)書く」 !（4）繰り返す。ret = mBotTools!(tmpArray)float変換。 」
		そうでなければ「(type) ==(mbotType:typeChar)」なら「ret = self!BYTE?。」
		そうでなければ「(type) ==(mbotType:typeShort)」なら「「tmpArray!(self!BYTE?)書く」 !（4）繰り返す。ret = mBotTools!(tmpArray)Short変換。」
		そうでなければ「(type) ==(mbotType:typeString)」なら「length  =  self!BYTE?。ret = self! (length) 値？。」
		そうでなければ「ret = "NoData"」実行。
		ret:revSeq = index。
		
	」そうでなければ「
		// 执行指令の時の処理　（とりあえず、送信シーケンスを返しておく。＜ひでぇ）
		ret ="执行指令return"。
	」実行。

	end1 = self!BYTE?。
	end2 = self!BYTE?。

ret
」。

システム！"dtree" 使う。
システム！"dolittle_lib/Studuino/defineST" 使う。
システム！"dolittle_lib/Studuino/oSTvalue" 使う。
システム！"dolittle_lib/Studuino/ST_valueElement" 使う。

///////////////////////////////////////
// dMessageの拡張
///////////////////////////////////////
_dMessageDummy＝dNode！"dummy" 作る。
_dMessageDummy：new＝「|_o _m _p| ret＝self！作る。ret：_obj＝_o。ret：_msg＝_m。ret：_params＝_p。ret」。
_dMessageDummy：eval＝「|p| 　self」。

_dMessage＝dMessage。

dMessage= _dMessageDummy.
dMessage:SetValid=「self=_dMessage」。
dMessage:SetInvalid=「self=_dMessageDummy」。


stIfObj＝dNode！"I" 作る。
stIfObj：send＝「｜p msg｜
　「msg＝＝"そうでなければ"」！なら「
　　　out＝out＋"{"。
　　　（p！1 読む）！eval。
　　　out＝out＋"} else "。
　」実行。
　　「msg＝＝"なら"」！なら「
　　　out！"if (" 書く。:infix=true。
　　　（p！1 読む）！eval。
　　　out！")" 書く。:infix=false。
　」実行。
　「msg＝＝"実行"」！なら「
　　　out＝out＋"{"。
　　　（p！1 読む）！eval。
　　　out＝out＋"}"。
　」実行。
　ret＝self。
」。

stWhileObj＝dNode！"W" 作る。
stWhileObj：send＝「｜p msg｜
　「msg＝＝"実行"」！なら「
　　　out＝out＋"{"。
　　　（p！1 読む）！eval。
　　　out＝out＋"}"。
　」実行。
　ret＝self。
」。


//ブロックの再定義
dBlock：eval＝「
//	b_info = 未定義.
//	bManager！（b_info）　get.			//	 ここ手抜き
//	b_info:Code=out。
//	root:out=配列！作る。
//	bManager!Up.
	
	///ブロックの実行////
	_values！「|v| v！eval」それぞれ実行。
	
//	//戻す処理						//	 ここ手抜き
//	temp=out.
//	bManager!Down.
//	bManager！（b_info）　get.			
//	root:out=b_info:Code.
//	root:out！(temp) まとめる。 

」。

dBlock:send=「|p msg; n|
　「msg=="繰り返す"」！なら「
　　out！（"for (int i=0; i<"+（p！1 読む）+"; i++) {"） 書く。
　　self！eval。
　　out！"}" 書く。
　」実行。

　「msg=="なら"」！なら「
　　out！"if (" 書く。:infix=true。
　　self！eval。
　　out！")" 書く。:infix=false。
　　ret＝stIfObj！作る。
　」実行。

　「msg=="の間"」！なら「
　　out！"while (" 書く。:infix=true。
　　self！eval。
　　out！")" 書く。:infix=false。
　　ret＝stWhileObj！作る。
　」実行。

　ret。
」。

全部:send＝「｜p msg｜

　「msg=="本当"」！なら「
　　「｜n｜
　　　「n>1」！なら「out！" && " 書く」実行。
　　　out！"(" 書く。（p！(n) 読む）！eval。out！")" 書く。
　　　
　　」！（p！要素数？）繰り返す。
　」実行。
」。
どれか:send＝「｜p msg｜
　「msg=="本当"」！なら「
　　「｜n｜
　　　「n>1」！なら「out！" || " 書く」実行。
　　　out！"(" 書く。（p！(n) 読む）！eval。out！")" 書く。
　　」！（p！要素数？）繰り返す。
　」実行。
」。

////////////


ST変数="".
ST変数:Type="__stvalue".
ST変数:send＝「｜p msg; v｜
     p1 = p！1 読む.
　「msg==">"」！なら「out！（""！（self）" > "連結）書く。     v=（p1 ！eval）。」実行。
　「msg==">="」！なら「out！（""！（self）" >= "連結）書く。v=（p1 ！eval）。」実行。
　「msg=="<"」！なら「out！（""！（self）" < "連結）書く。     v=（p1 ！eval）。」実行。
　「msg=="<="」！なら「out！（""！（self）" <= "連結）書く。v=（p1 ！eval）。」実行。
　「msg=="=="」！なら「out！（""！（self）" != "連結）書く。 v=（p1 ！eval）。」実行。
　「msg=="!="」！なら「out！（""！（self）" == "連結）書く。 v=（p1 ！eval）。」実行。

     iscalc=false.
     ("+:-:*:/:%" ! ”:” 分割)!「|x| 「x == msg」！なら「iscalc = true.」実行」それぞれ実行.
　「iscalc==true」！なら「
　　　out！（""！（self）(stTools!（msg）記号変換)  連結）書く。v=（p1 ！eval）。
　　　「(v:Type)=="__numObj"」! なら「out！(v)書く」実行。
　」実行。
　
　ret。
　
」。



dAssign＝dNode！"=" 作る。
dAssign：new＝「|_n _v| ret=self！作る。ret:_name=_n。ret:_value=_v。

ret」。

dAssign：eval＝「|;val o|
//label!("*dA*") create.
	_obj = valueEl!(self:_name)(self:_value)write.
	( "root:" +(_obj:key) + " = " + "STvalue!"+dq+ " " +(_obj:name) +dq　+ " 作る" +" .") !実行。


	vType = "int ".
	//("studuino:"+(_obj:key) + " = " + (_obj:_value) + ".")　! 実行。
	out！((vType) +(_obj:name) + " = " )書く。 
	:infix=true.
	// 処理実行
	「_obj＝＝"!"」！なら「
		_obj＝_obj!eval。
	」そうでなければ
	「_obj＝＝"B"」なら「
		//想定外（未実装）
	」そうでなければ「
		out！(_obj)書く。 
		:ret = _obj。
		//「:ret==undef」！なら「:ret=_obj」実行。
	」実行。
	:infix=false.
	out！(" ;" ) 書く。 
:ret」。
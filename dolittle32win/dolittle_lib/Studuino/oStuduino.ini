システム！"dolittle_lib/Studuino/defineST" 使う。
システム！"dolittle_lib/Studuino/ST_MotorControl" 使う。

最初に実行=「」。
繰り返し実行=「」。

ポート番号＝「
  結果= undef。
　「自分！”^[AaＡａ][0０]$”　含む？」！なら「結果＝”PORT_A0”」実行。
　「自分！”^[AaＡａ][1１]$”　含む？」！なら「結果＝”PORT_A1”」実行。
　「自分！”^[AaＡａ][2２]$”　含む？」！なら「結果＝”PORT_A2”」実行。
　「自分！”^[AaＡａ][3３]$”　含む？」！なら「結果＝”PORT_A3”」実行。
　「自分！”^[AaＡａ][4４]$”　含む？」！なら「結果＝”PORT_A4”」実行。
　「自分！”^[AaＡａ][5５]$”　含む？」！なら「結果＝”PORT_A5”」実行。
　「自分！”^[AaＡａ][6６]$”　含む？」！なら「結果＝”PORT_A6”」実行。
　「自分！”^[AaＡａ][7７]$”　含む？」！なら「結果＝”PORT_A7”」実行。
　「自分！”^[DdＤｄ][2２]$”　含む？」！なら「結果＝”PORT_D2”」実行。
　「自分！”^[DdＤｄ][4４]$”　含む？」！なら「結果＝”PORT_D4”」実行。
　「自分！”^[DdＤｄ][7７]$”　含む？」！なら「結果＝”PORT_D7”」実行。
　「自分！”^[DdＤｄ][8８]$”　含む？」！なら「結果＝”PORT_D8”」実行。
　「自分！”^[DdＤｄ][9９]$”　含む？」！なら「結果＝”PORT_D9”」実行。
　「自分！”^[DdＤｄ][1１][0０]$”　含む？」！なら「結果＝”PORT_D10”」実行。
　「自分！”^[DdＤｄ][1１][1１]$”　含む？」！なら「結果＝”PORT_D11”」実行。
　「自分！”^[DdＤｄ][1１][2２]$”　含む？」！なら「結果＝”PORT_D12”」実行。
　結果。
」。

自分：LEDの値＝「
　「自分＝＝”1”」！なら「結果＝”ON”」実行。
　「自分＝＝”１”」！なら「結果＝”ON”」実行。
　「自分＝＝”ON”」！なら「結果＝”ON”」実行。
　「自分＝＝”on”」！なら「結果＝”ON”」実行。
　「自分＝＝”ＯＮ”」！なら「結果＝”ON”」実行。
　「自分＝＝”ｏｎ”」！なら「結果＝”ON”」実行。
　「自分＝＝”点灯”」！なら「結果＝”ON”」実行。
　「自分＝＝”てんとう”」！なら「結果＝”ON”」実行。
　「自分＝＝”光る”」！なら「結果＝”ON”」実行。
　「自分＝＝”ひかる”」！なら「結果＝”ON”」実行。

　「自分＝＝”0”」！なら「結果＝”OFF”」実行。
　「自分＝＝”０”」！なら「結果＝”OFF”」実行。
　「自分＝＝”OFF”」！なら「結果＝”OFF”」実行。
　「自分＝＝”off”」！なら「結果＝”OFF”」実行。
　「自分＝＝”ＯＦＦ”」！なら「結果＝”OFF”」実行。
　「自分＝＝”ｏｆｆ”」！なら「結果＝”OFF”」実行。
　「自分＝＝”消灯”」！なら「結果＝”OFF”」実行。
　「自分＝＝”しょうとう”」！なら「結果＝”OFF”」実行。
　「自分＝＝”消える”」！なら「結果＝”OFF”」実行。
　「自分＝＝”きえる”」！なら「結果＝”OFF”」実行。

結果。
」。

自分：音色＝「
　「自分==”ド”」！なら「結果=”BZR_C3”」実行。
　「自分==”BZR_C3”」！なら「結果=”BZR_C3”」実行。

　「自分==”レ”」！なら「結果=”BZR_D3”」実行。
　「自分==”BZR_D3”」！なら「結果=”BZR_D3”」実行。

　「自分==”ミ”」！なら「結果=”BZR_E3”」実行。
　「自分==”BZR_E3”」！なら「結果=”BZR_E3”」実行。

　「自分==”ファ”」！なら「結果=”BZR_F3”」実行。
　「自分==”BZR_F3”」！なら「結果=”BZR_F3”」実行。

　「自分==”ソ”」！なら「結果=”BZR_G3”」実行。
　「自分==”BZR_G3”」！なら「結果=”BZR_G3”」実行。

　「自分==”ラ”」！なら「結果=”BZR_A3”」実行。
　「自分==”BZR_A3”」！なら「結果=”BZR_A3”」実行。

　「自分==”シ”」！なら「結果=”BZR_B3”」実行。
　「自分==”BZR_B3”」！なら「結果=”BZR_B3”」実行。

　「自分==”ド↑”」！なら「結果=”BZR_C4”」実行。
　「自分==”BZR_C4”」！なら「結果=”BZR_C4”」実行。

結果。
」。

studuino=dNode!"0" 作る。

studuino=studuino。
st=studuino。
ロボ=studuino。
ろぼ=studuino。
スタディーノ=studuino。
すたでぃーの=studuino。

studuino：kvs_set＝「｜key value｜　（"：studuino："＋（key）＋"＝"＋（dq）＋（value）＋（dq）＋"。"）！実行」。
studuino：kvs_get＝「｜key｜　（"：tmp＝：studuino："＋（key）＋"。"）！実行。：tmp」。

// ----------------------------------
// モーター制御
// ----------------------------------
studuino:convertMotorCom＝「|p msg  semi stname; ret tmp_str_tool str|
	str =""。
      tmp_str_tool= 配列！作る。
　「msg=="モーターオフセット"」！なら「
　      モーター制御！(tmp_str_tool) (stname)  (p！1 読む)  (p！2 読む) オフセット.
　      str=tmp_str_tool!結合。
　　」そうでなければ
　「msg=="モーター出力量"」なら「
　      モーター制御！(tmp_str_tool) (p！1 読む)右モータ出力設定.
　      モーター制御！(tmp_str_tool) (p！2 読む)左モータ出力設定.
　      str=tmp_str_tool!結合。
　　」そうでなければ
　「msg=="前進"」なら「
　
	　　「(p!1 読む)==undef」！なら「
　      	モーター制御!(tmp_str_tool)(0) (stname) (semi) 前進.
		」そうでなければ「
　      	モーター制御!(tmp_str_tool)(p！1 読む) (stname) (semi) 前進.
		」実行。
　      str=tmp_str_tool!結合。
　　」そうでなければ
　「msg=="後進"」なら「
		「(p!1 読む)==undef」！なら「
　      	モーター制御!(tmp_str_tool)(0) (stname) (semi) 後進.
		」そうでなければ「
　　　		モーター制御!(tmp_str_tool)(p！1 読む) (stname) (semi) 後進.
		」実行。
　      str=tmp_str_tool!結合。
　　」そうでなければ
　「msg=="左回り"」なら「
		「(p!1 読む)==undef」！なら「
　      	モーター制御!(tmp_str_tool)(0) (stname) (semi) 左回り.
		」そうでなければ「
　　　		モーター制御!(tmp_str_tool)(p！1 読む) (stname) (semi) 左回り.
		」実行。
　      str=tmp_str_tool!結合。
　　」そうでなければ
　「msg=="右回り"」なら「
		「(p!1 読む)==undef」！なら「
　      	モーター制御!(tmp_str_tool)(0) (stname) (semi) 右回り.
		」そうでなければ「
　　　		モーター制御!(tmp_str_tool)(p！1 読む) (stname) (semi) 右回り.
		」実行。
　      str=tmp_str_tool!結合。
　　」そうでなければ
　「msg=="左折"」なら「
		「(p!1 読む)==undef」！なら「
　      	モーター制御!(tmp_str_tool)(0) (stname) (semi) 左折.
		」そうでなければ「
　　　		モーター制御!(tmp_str_tool)(p！1 読む) (stname) (semi) 左折.
		」実行。
　      str=tmp_str_tool!結合。
　　」そうでなければ
　「msg=="右折"」なら「
			「(p!1 読む)==undef」！なら「
　      	モーター制御!(tmp_str_tool)(0) (stname) (semi) 右折.
		」そうでなければ「
　　　		モーター制御!(tmp_str_tool)(p！1 読む) (stname) (semi) 右折.
		」実行。
　      str=tmp_str_tool!結合。
　　」そうでなければ　「msg=="停止"」なら「
　　「(p!1 読む)==undef」！なら「
　      	モーター制御!(tmp_str_tool)(0) (stname) (semi) 停止.
		」そうでなければ「
　　　		モーター制御!(tmp_str_tool)(p！1 読む) (stname) (semi) 停止.
		」実行。
　      str=tmp_str_tool!結合。
　　」そうでなければ
	「msg=="右回転"」なら「
		「(p!1 読む)==undef」！なら「
　      	モーター制御!(tmp_str_tool)(0) (stname) (semi) 右回転.
		」そうでなければ「
			モーター制御!(tmp_str_tool)(p！1 読む) (stname) (semi) 右回転.
		」実行。
　      str=tmp_str_tool!結合。
　　
  」そうでなければ
	「msg=="左回転"」なら「
		「(p!1 読む)==undef」！なら「
　      	モーター制御!(tmp_str_tool)(0) (stname) (semi) 左回転.
		」そうでなければ「
			モーター制御!(tmp_str_tool)(p！1 読む) (stname) (semi) 左回転.
		」実行。
　      str=tmp_str_tool!結合。
　」そうでなければ
　「msg=="モーター動作"」なら「
　　　モーター制御!(tmp_str_tool)(p！1 読む) (p！2 読む) (p！3 読む)(stname) (semi) モーター設定.
　      str=tmp_str_tool!結合。
　　」そうでなければ「
			str=""。
	」実行。

str」。

// ---------------------------------------------
// 初期化命令
// ---------------------------------------------
studuino:convertInitCom＝「|p msg semi stname; ret tmp_str_tool str|
	str =""。
「msg=="デジタルled"」！なら「|;poname|
	pno＝（p！1 取得）！ポート番号。
　　「pno！"PORT_D" 含む？」！なら「
　　　 str=stname+".InitServomotorPortForLED("+ （pno） + ")"+(semi)
　　」そうでなければ「
　　　 str=stname+".InitSensorPort("+（pno）+", PIDLED"+")"+(semi)
　　」実行。
　　studuino！（pno） "DLED" kvs_set。
　　
　」そうでなければ 「msg=="アナログled"」なら「
　　pno＝（p！1 取得）！ポート番号。
　　「pno！"PORT_D" 含む？」！なら「
　　　str=stname+".InitServomotorPortForLED("+ （pno） + ")"+(semi)
　　」そうでなければ「
　　　str=stname+".InitSensorPort("+（pno）+", PIDLED"+")"+(semi)
　　」実行。
　　studuino！（pno） "ALED" kvs_set。
　　
　」そうでなければ「msg=="dcモーター"」なら「
　　str=stname+".InitDCMotorPort(PORT_M1)"+(semi)+
　　stname+".InitDCMotorPort(PORT_M2)"+(semi)。
　　studuino！"PORT_M1" "DC" kvs_set。
　　studuino！"PORT_M2" "DC" kvs_set。
　　
　」そうでなければ 「msg=="サーボモーター"」なら「
　　pno＝（p！1 取得）！ポート番号。
　　str=stname+".InitServomotorPort(" + （pno）＋")"+(semi)。
　　studuino！（pno） "SV" kvs_set。
　　
　」そうでなければ 「msg=="スイッチ"」なら「
　　pno＝（p！1 取得）！ポート番号。
　　str=stname+".InitSensorPort("+（pno）+", PIDPUSHSWITCH"+")"+(semi)。
　　studuino！（pno） "PSW" kvs_set。
　　
　」そうでなければ 「msg=="光センサー"」なら「
　　pno＝（p！1 取得）！ポート番号。
　　str=stname+".InitSensorPort("+（pno）+", PIDLIGHTSENSOR"+")"+(semi)。
　　studuino！（pno） "LIGHT" kvs_set。
　　
　」そうでなければ 「msg=="赤外線センサー"」なら「
　　pno＝（p！1 取得）！ポート番号。
　　str=stname+".InitSensorPort("+（pno）+", PIDIRPHOTOREFLECTOR"+")"+(semi)。
　　studuino！（pno） "IR" kvs_set。
　　
　」そうでなければ 「msg=="音センサー"」なら「
　　pno＝（p！1 取得）！ポート番号。
　　str=stname+".InitSensorPort("+（pno）+", PIDSOUNDSENSOR"+")"+(semi)。
　　studuino！（pno） “SOUND” kvs_set。
　　
　」そうでなければ 「msg=="タッチセンサー"」なら「
　　pno＝（p！1 取得）！ポート番号。
　　str=stname+".InitSensorPort("+（pno）+",PIDTOUCHSENSOR "+")"+(semi)。
　　studuino！（pno） “TOUCH” kvs_set。
　
　」そうでなければ 「msg=="温度センサー"」なら「
	pno＝（p！1 取得）！ポート番号。　
　　str=stname+".InitSensorPort("+(pno)+",PIDTEMPERATURESENSOR"+")"+(semi)。
　　studuino！(pno) "TE" kvs_set。
　　
　」そうでなければ 「msg=="加速度センサー"」なら「
　　str=stname+".InitI2CPort(PIDACCELEROMETER)"+(semi)。
　　studuino！"PORT_A4" "AC" kvs_set。
　　studuino！"PORT_A5" "AC" kvs_set。
　　
　」そうでなければ 「msg=="カラーセンサー"」なら「
　　str=stname+".InitI2CPort(PIDCOLORSENSOR)"+(semi)。
　　studuino！"PORT_A4" "CO" kvs_set。
　　studuino！"PORT_A5" "CO" kvs_set。
　　
　」そうでなければ 「msg=="超音波距離センサー"」なら「
　　str=stname+".InitSensorPort(PORT_A0, PORT_A1 ,PIDULTRASONICSENSOR)"+(semi)。
　　studuino！"PORT_A0" "UL" kvs_set。
　　studuino！"PORT_A1" "UL" kvs_set。
　　
　　」そうでなければ「
				str =""。
　」実行。

str」。


// ---------------------------------------------
// 出力命令
// ---------------------------------------------
studuino:convertOutputCom＝「|p msg  semi stname; ret pno  str|
	  str =""。
　「msg=="書く"」！なら「|;type v|
	　　pno＝（p！1 取得）！ポート番号。type＝studuino！（pno）kvs_get。
　　v＝p！2 取得。
　　「v<0」!なら「v=0」実行。
　　「type=="DLED"」！なら「str=stname+".LED("+（pno）+", "+（（v）！LEDの値）+")"+(semi)」実行。
　　「type=="ALED"」！なら「「v>255」！なら「v=255」実行。str=stname+".Gradation("+（pno）+", "+（v）+")"+(semi)」実行。
　　「type=="SV"」！なら「「v>180」！なら「v=180」実行。str=stname+".Servomotor("+（pno）+", "+（v）+")"+(semi)」実行。
　」そうでなければ「
			str =""。
	」実行。
str」。

// ---------------------------------------------
// 入力命令
// ---------------------------------------------
studuino:convertInputCom＝「|p msg  semi stname; ret pno str pram1 type |
	str =""。
　「msg=="読む"」！なら「
　  　type = undef。
　	  　pno＝( ( p！1 取得)！ポート番号)。
　	 「pno!=undef」！なら「
         　 type＝studuino！（pno）kvs_get。
          　typeA0＝studuino！”PORT_A0” kvs_get。
          　typeA1＝studuino！”PORT_A1” kvs_get。
　	 	」実行。
　	 	    // ----------------------------------------------------------------
　	 		//	アナログ入力/デジタル入力を用いるセンサの値を取得ケースの処理
　	 		// ----------------------------------------------------------------
        「type=="PSW"」！なら「str=stname+".GetPushSwitchValue("+（pno）+")"+(semi)」実行。
	　 「type=="DLED"」！なら「str=stname+".GetPushSwitchValue("+（pno）+")"+(semi)」実行。
        「type=="LIGHT"」！なら「str=stname+".GetLightSensorValue("+（pno）+")/4"+(semi)」実行。
        「type=="IR"」！なら「str=stname+".GetIRPhotoreflectorValue("+（pno）+")/4"+(semi)」実行。
        「type=="SOUND"」！なら「str=stname+".GetSoundSensorValue("+（pno）+")/4"+(semi)」実行。
        「type=="TOUCH"」！なら「str=stname+".GetTouchSensorValue("+（pno）+")"+(semi)」実行。
        「type=="TE"」！なら「str="(((("+stname+".GetTemperatureSensorValue("+(pno)+")/1024.0)*3.3)-0.5)/0.01)"+(semi)」実行。
        「全部!(type=="UL")（typeA0=="UL"）（typeA1=="UL"） 本当」！なら「str=stname+".GetUltrasonicSensorValue(PORT_A0,PORT_A1)/58"+(semi)。」実行。

	       // ----------------------------------------------------------------
	　　//	以後はI2Cセンサの値を取得するケースの処理
	　　//    注意：以下を次回以降直す時は、各センサの取得処理をメソッド化することを検討すること。
	　　// ----------------------------------------------------------------
 　		typeA4＝studuino！”PORT_A4” kvs_get。
　			typeA5＝studuino！”PORT_A5” kvs_get。
　
　		   // 加速度センサの計測ケース
			「全部!（typeA4=="AC"）（typeA5=="AC"） 本当」！なら「
				「どれか！((p！1 取得)=="x" )((p！1 取得)=="y")((p！1 取得)=="z") 本当」！なら「
							dimension＝（p！1 取得）。
   　						「dimension=="x"」！なら「str=stname+".GetAccelerometerValue(X_AXIS)"+(semi)。」実行。
   　						「dimension=="y"」！なら「str=stname+".GetAccelerometerValue(Y_AXIS)"+(semi)。」実行。
   　						「dimension=="z"」！なら「str=stname+".GetAccelerometerValue(Z_AXIS)"+(semi)。」実行。
				」実行。
			」そうでなければ「全部!（typeA4=="CO"）（typeA5=="CO"） 本当」なら「
				「どれか！((p！1 取得)=="赤" )((p！1 取得)=="青")((p！1 取得)=="緑") ((p！1 取得)=="光量") ((p！1 取得)=="あか" )((p！1 取得)=="あお")((p！1 取得)=="みどり") ((p！1 取得)=="こうりょう")本当」！なら「
						color＝（p！1 取得）。
						「どれか!(color=="赤")(color=="あか")本当」！なら「str=stname+".GetColorSensorValue(VALUE_RED )"+(semi)。」実行。
						「どれか!(color=="青")(color=="あお")本当」！なら「str=stname+".GetColorSensorValue(VALUE_BLUE  )"+(semi)。」実行。
						「どれか!(color=="緑")(color=="みどり")本当」！なら「str=stname+".GetColorSensorValue(VALUE_GREEN)"+(semi)。」実行。
						「どれか!(color=="光量")(color=="こうりょう")本当」！なら「str=stname+".GetColorSensorValue(VALUE_CLEAR)"+(semi)。」実行。
		　		」実行。
			」実行。
		」そうでなければ「msg=="値?"」なら「
　	 	　	pno＝( ( p！1 取得)！ポート番号)。
　	 　「pno!=undef」！なら「
    　    　type＝studuino！（pno）kvs_get。
        　　typeA0＝studuino！”PORT_A0” kvs_get。
        　　typeA1＝studuino！”PORT_A1” kvs_get。
　	 	　」実行。
　	 	    // ----------------------------------------------------------------
　	 		//	アナログ入力/デジタル入力を用いるセンサの値を取得ケースの処理
　	 		// ----------------------------------------------------------------
        「type=="PSW"」！なら「str=stname+".GetPushSwitchValue("+（pno）+")"+(semi)」実行。
	　「type=="DLED"」！なら「str=stname+".GetPushSwitchValue("+（pno）+")"+(semi)」実行。
        「type=="LIGHT"」！なら「str=stname+".GetLightSensorValue("+（pno）+")"+(semi)」実行。
        「type=="IR"」！なら「str=stname+".GetIRPhotoreflectorValue("+（pno）+")"+(semi)」実行。
        「type=="SOUND"」！なら「str=stname+".GetSoundSensorValue("+（pno）+")"+(semi)」実行。
        「type=="TOUCH"」！なら「str=stname+".GetTouchSensorValue("+（pno）+")"+(semi)」実行。
        「type=="TE"」！なら「str=stname+".GetTemperatureSensorValue("+(pno)+")"+(semi)」実行。
        「全部!(type=="UL")（typeA0=="UL"）（typeA1=="UL"） 本当」！なら「str=stname+".GetUltrasonicSensorValue(PORT_A0,PORT_A1)"+(semi)。」実行。

	       // ----------------------------------------------------------------
	　　//	以後はI2Cセンサの値を取得するケースの処理
	　　//    注意：以下を次回以降直す時は、各センサの取得処理をメソッド化することを検討すること。
	　　// ----------------------------------------------------------------
 　		typeA4＝studuino！”PORT_A4” kvs_get。
　			typeA5＝studuino！”PORT_A5” kvs_get。
　
　		   // 加速度センサの計測ケース
			　「全部!（typeA4=="AC"）（typeA5=="AC"） 本当」！なら「
				　「どれか！((p！1 取得)=="x" )((p！1 取得)=="y")((p！1 取得)=="z") 本当」！なら「
							dimension＝（p！1 取得）。
   　						「dimension=="x"」！なら「str=stname+".GetAccelerometerValue(X_AXIS)"+(semi)。」実行。
   　						「dimension=="y"」！なら「str=stname+".GetAccelerometerValue(Y_AXIS)"+(semi)。」実行。
   　						「dimension=="z"」！なら「str=stname+".GetAccelerometerValue(Z_AXIS)"+(semi)。」実行。
				　」実行。
			　」そうでなければ「全部!（typeA4=="CO"）（typeA5=="CO"） 本当」なら「
				「どれか！((p！1 取得)=="赤" )((p！1 取得)=="青")((p！1 取得)=="緑") ((p！1 取得)=="光量") ((p！1 取得)=="あか" )((p！1 取得)=="あお")((p！1 取得)=="みどり") ((p！1 取得)=="こうりょう")本当」！なら「
						color＝（p！1 取得）。
						「どれか!(color=="赤")(color=="あか")本当」！なら「str=stname+".GetColorSensorValue(VALUE_RED )"+(semi)。」実行。
						「どれか!(color=="青")(color=="あお")本当」！なら「str=stname+".GetColorSensorValue(VALUE_BLUE  )"+(semi)。」実行。
						「どれか!(color=="緑")(color=="みどり")本当」！なら「str=stname+".GetColorSensorValue(VALUE_GREEN)"+(semi)。」実行。
						「どれか!(color=="光量")(color=="こうりょう")本当」！なら「str=stname+".GetColorSensorValue(VALUE_CLEAR)"+(semi)。」実行。
		　		　　」実行。
		　　　」実行。
			」そうでなければ「
			str =""。
	」実行。
str
」。

//---------------------------------------------------------------
// 命令解釈のメイン処理？
//---------------------------------------------------------------
studuino:str＝””。
studuino:send＝「|p msg; str semi|
ret=self。str=""。semi=""。
　「infix!=true」！なら「semi=";"」実行。

　「msg=="待つ"」！なら「str=stname+".Timer("+（p！1 取得）+")"+(semi)」実行。

//　「msg=="ブザー音"」！なら「str=stname+".Buzzer("+（（p！1 取得）！ポート番号）+", "+（（p！2 取得）！音色）+","+（p！3 取得）+”)”+(semi)」実行。

	// モーター制御
	str = (str) + (self!(p) (msg) (semi) (stname) convertMotorCom)。
	// 初期化命令
	str = (str)  + (self!(p) (msg) (semi)  (stname) convertInitCom)。
	// 出力命令
	str = (str)  + (self!(p) (msg) (semi)  (stname) convertOutputCom)。
	// 入力命令
	str = (str)  + (self!(p) (msg) (semi)  (stname) convertInputCom)。

　
    //比較演算子への対応
   // 計算用演算子への対応
   iscalc=false.
     (">:>=:<:<=:==:!=:+:-:*:/:%" ! ”:” 分割)!「|x| 「x == msg」！なら「iscalc = true.」実行」それぞれ実行.
　「iscalc==true」！なら「
　	p1 = p！1 取得.
　	「全部！（(p1:Type)!="__numObj") ((p1:Type)!="__stvalue" )本当」！なら
　	「
　		//str = stTools!（msg）記号変換.
　		// いい加減に処理。　見直すこと！
　		b_info = 未定義.
		bManager！（b_info）　get.			//	 ここ手抜き
		b_info:Code=root:out。

		root:out=配列！作る。
		bManager!Up.

		p1 ！eval.

		//戻す処理						//	 ここ手抜き
		temp=out.
		str=str +(stTools!（msg）記号変換)+(out!結合)。


		bManager!Down.
		bManager！（b_info）　get.
		root:out=b_info:Code.
　
　	」そうでなければ「
　　　	str = ""！(stTools!（msg）記号変換) （p1） 連結。
　　　
　　　」実行。
　」実行。

　「（str！長さ？）>0」！なら「out！(str)書く。str=""」実行。


　ret。
」。


studuino:loop_init＝「
　sv_cnt=0。
　sv_ary=配列！"PORT_D2" "PORT_D4" "PORT_D7" "PORT_D8" "PORT_D9" "PORT_D10" "PORT_D11" "PORT_D12" 作る。
　sv_ary！「｜port｜　「（studuino！（port）kvs_get）=="SV"」！なら「sv_cnt=sv_cnt+1」実行」それぞれ実行。
　「sv_cnt＞0」！なら「
　　out！（"byte connector["+sv_cnt+"];"）書く。
　　out！（"byte degree["+sv_cnt+"];"）書く。
　」実行。
」。


studuino：mktree=「|b| "dtree=dBlock！（配列！"！（b!printm）"作る）new。"連結 実行。」。

studuino:転送＝「
	///////////////////////
	// プリプロセス
	///////////////////////
	dMessage!SetInvalid.
	studuino！(最初に実行) mktree。dtree！eval。
	studuino！(繰り返し実行) mktree。dtree！eval。
	dMessage!SetValid.
	out!クリア。
	///////////////////////
	// メイン処理
	///////////////////////


	out！（"#include"+(dq)+"arduino.h"+(dq)） 書く。
	out！"#include<Arduino.h>" 書く。
	out！"#include<Servo.h>" 書く。
	out！"#include<Wire.h>" 書く。
	out！"#include<I2Cdev.h>" 書く。
	out！"#include<MMA8653.h>" 書く。
	out！"#include<MPU6050.h>" 書く。
	out！"#include<ColorSensor.h>" 書く。
	out！"#include<IRremoteForStuduino.h>" 書く。
	out！（"#include"+(dq)+"Bluetooth.h" + (dq)） 書く。
	out！（"#include"+(dq)+"Studuino.h"+(dq)） 書く。

	// 宣言
	モーター制御!(out)宣言.

	out！（"Studuino "+stname+";"） 書く。
	out！" " 書く。

	// 初期化処理
	out！"void setup(){"　書く。
	out！"Serial.begin(9600);"　書く。


	studuino！(最初に実行) mktree。dtree！eval。
	out！"}" 書く。

	// 主処理
	out！" " 書く。
	out！"void loop(){" 書く。
	studuino！loop_init。
	studuino！(繰り返し実行) mktree。dtree！eval。
	out！"}" 書く。

	// Main記述
	out！" " 書く。
	out！"int main(void){" 書く。
	out！"init();" 書く。
	out！"setup();" 書く。
	out！"for(;;){" 書く。
	out！"loop();" 書く。
	out！"}" 書く。
	out！"}" 書く。

	「（システム:osname）！"Mac OS" 含む？」！なら「
				転送コマンド＝"./buildTransfer.sh"。
				pkg=(((システム:jar)！":" 分割)！1 読む)！"/MacOS/../Java/lib" "" 置き換える。
				スケッチ="studuino/studuino.ino"」
	そうでなければ「「（システム:osname）！"Windows" 含む？」！なら「
				転送コマンド＝"cscript StuduinoProgramSender.vbs"。
				pkg=""。
				スケッチ="studuino\studuino.ino"
	」そうでなければ「
				転送コマンド＝""。pkg=""。スケッチ="studuino.ino"」実行
	」実行。

	ファイル＝テキストファイル！（スケッチ）　作る。
	ファイル！（out）全部書く。

	結果＝システム！"Studuinoへの転送を実行しますか？"　確認ダイアログ。
	「結果==true」！なら「
		実行結果＝システム！（（転送コマンド）+" "+（pkg））実行。
		メッセージ＝配列！"Arduino IDEが指定のフォルダにインストールされていません"
				  "複数のStuduinoが接続されています"
				  "Studuinoが接続されていません"
				  "転送するプログラムが作成されませんでした"
				  "プログラムの転送に失敗しました"
				  "想定外のエラーが発生しました"
				  "プログラムのコピーに失敗しました"
				  "コンパイルに失敗しました"
				  "リンクに失敗しました"
				  "転送するファイルがありません"
				  "Studuino転送ツールがありません"
				  "Studino.iniが古い可能性があります"作る。
						　
		「実行結果:retcode==0」！なら「
			システム！"転送完了"　表示ダイアログ。」
		そうでなければ「
			// １１以上の値が来ることを想定していない＜後で直したほうがいい
			str =メッセージ!　(実行結果:retcode) 読む。
			システム！（ "エラー："　+　str) 表示ダイアログ。
		」実行。
	」実行。

」。
